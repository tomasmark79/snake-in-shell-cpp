{
    /* (c) Tomáš Mark 2024 */
    "version": "2.0.0",
    "inputs": [
        {
            /* SPECIAL MENU ITEMS */
            "id": "specialTaskName",
            "type": "pickString",
            "description": "Select MarkWare Special Task",
            "options": [
                "Permutate scenarios ☕"
            ],
            "default": "Permutate scenarios ☕"
        },
        {
            /* MENU ITEMS */
            "id": "taskName",
            "type": "pickString",
            "description": "Select MarkWare Task",
            "options": [
                "🚀 Zero to Build [s]",
                "🦸 Zero to Hero [s]",
                "🧹 Clean folder [s]",
                "🗡️ Conan install [s]",
                "🔧 CMake configure [s]",
                "🪲 CMake configure with debugger [s]",
                "🔨 Build [s]",
                "📜 Collect Licenses [s]",
                "📌 Install Artefacts [s]",
                "📦 Release Tarballs [s]",
                "🛸 Run CPack [s]",
                "",
                "🚀 Zero to Build [l]",
                "🦸 Zero to Hero [l]",
                "🧹 Clean folder [l]",
                "🗡️ Conan install [l]",
                "🔧 CMake configure [l]",
                "🪲 CMake configure with debugger [l]",
                "🔨 Build [l]",
                "📜 Collect Licenses [l]",
                "📌 Install Artefacts [l]",
                "📦 Release Tarballs [l]",
                "🛸 Run CPack [l]",
                "",
                "🚀 Zero to Build [sl]",
                "🦸 Zero to Hero [sl]",
                "🧹 Clean folder [sl]",
                "🗡️ Conan install [sl]",
                "🔧 CMake configure [sl]",
                "🪲 CMake configure with debugger [sl]",
                "🔨 Build [sl]",
                "📜 Collect Licenses [sl]",
                "📌 Install Artefacts [sl]",
                "📦 Release Tarballs [sl]",
                "🛸 Run CPack [sl]",
                "",
                "⚔️ conan graph.html",
                "🔍 lint",
                "📐 clang-format",
                "📏 cmake-format"
            ],
            "default": "🔨 Build [s]"
        },
        {
            /* ARCH ITEMS */
            "id": "buildArch",
            "type": "pickString",
            "description": "Select target architecture",
            "options": [
                "default", /* this is system default compiler */
                "x86_64-clang-linux-gnu",
                "x86_64-w64-mingw32",
                "aarch64-rpi4-linux-gnu"
            ],
            "default": "default"
        },
        {
            /* BUILD TYPE ITEMS */
            "id": "buildType",
            "type": "pickString",
            "description": "Select type of build",
            "options": [
                "Debug",
                "Release",
                "RelWithDebInfo",
                "MinSizeRel"
            ],
            "default": "Debug"
        },
    ],
    "tasks": [
        {
            "label": "Launch Standalone",
            "type": "shell",
            "command": "${workspaceFolder}/Build/Standalone/default/Debug/VCMStandalone",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Launch Standalone",
            "problemMatcher": [],
            "dependsOn": [
                /* "clear terminal" */ /* uncomment if you want to clear terminal before each task */
            ]

        },
        {
            /* SPECIAL TASKS RUN */
            "label": "MarkWare Special Tasks",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/SolutionController.py",
                "${input:specialTaskName}",
                "independent_parameter"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "MarkWare Special Tasks",
            "problemMatcher": [],
            "dependsOn": [
                /* "clear terminal" */ /* uncomment if you want to clear terminal before each task */
            ]
        },
        {
            /* TASKS RUN */
            "label": "MarkWare Tasks",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/SolutionController.py",
                "${input:taskName}",
                "${input:buildArch}",
                "${input:buildType}"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "MarkWare Tasks",
            "problemMatcher": [],
            "dependsOn": [
                /* "clear terminal" */ /* uncomment if you want to clear terminal before each task */
            ]
        },
        {
            /* DIRECT BUILD (NO MENU) */
            "label": "Direct Build",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/SolutionController.py",
                "🔨 Build [s]",
                "default",
                "Debug"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "Direct Build",
            "problemMatcher": []
        },
        {
            /* DIRECT LINT C/C++ ( SHORT MENU )  */
            "label": "lintC",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/SolutionController.py",
                "🔍 lint",
                "${input:buildArch}",
                "${input:buildType}"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "lintC",
            "problemMatcher": []
        },
        {
            /* DIRECT CLANG-FORMAT ( SHORT MENU ) */
            "label": "clang-format",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/SolutionController.py",
                "📐 clang-format",
                "${input:buildArch}",
                "${input:buildType}"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "clang-format",
            "problemMatcher": []
        },
        {
            /* DIRECT CMAKE-FORMAT ( SHORT MENU ) */
            "label": "cmake-format",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/SolutionController.py",
                "📏 cmake-format",
                "${input:buildArch}",
                "${input:buildType}"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "cmake-format",
            "problemMatcher": []
        },
        { /* clear terminal */
            "label": "clear terminal",
            "type": "shell",
            "command": "clear",
            "group": "none",
            "problemMatcher": []
        }
    ]
}